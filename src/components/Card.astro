---
/**
 * Card Component
 *
 * Reusable card component for displaying projects and publications.
 * Dynamically generates action buttons based on available link properties in the data.
 *
 * Supported link types: github, download, web, use, youtube, pdf, online, dataset
 */
import {
    Database,
    Download,
    FileText,
    GitBranch,
    Github,
    Globe,
    Link as LinkIcon,
    Youtube,
} from 'lucide-astro';
import { ICON_SIZES } from '../constants/ui';
import type { Project, Publication } from '../types';
import type { ImageMetadata } from 'astro';

interface Props {
    item: Project | Publication;
    type: 'project' | 'publication';
}

const { item, type } = Astro.props;

type IconComponent = typeof Github;

// Import all images from assets directory at build time
const images = import.meta.glob<{ default: ImageMetadata }>('../assets/*.{webp,gif,png,jpg,jpeg}', {
    eager: true,
});

// Get the correct image for this item
const imagePath = `../assets/${item.image}`;
const imageModule = images[imagePath];
const imageSrc = imageModule?.default;

/**
 * Returns button configuration (label, icon, styles) for a given link type.
 *
 * @param linkType - Type of link (github, download, web, use, youtube, pdf, online, dataset)
 * @returns Button configuration object with label, icon component, and CSS classes
 */
function getButtonConfig(linkType: string) {
    const configs: Record<string, { label: string; icon: IconComponent; class: string }> = {
        github: {
            label: 'GitHub',
            icon: Github,
            class: 'bg-button-github hover:bg-button-github-hover text-white',
        },
        download: {
            label: 'Download',
            icon: Download,
            class: 'bg-button-download hover:bg-button-download-hover text-white',
        },
        web: {
            label: 'Visit',
            icon: Globe,
            class: 'bg-button-web hover:bg-button-web-hover text-white',
        },
        use: {
            label: 'Use This',
            icon: GitBranch,
            class: 'bg-button-use hover:bg-button-use-hover text-white',
        },
        youtube: {
            label: 'YouTube',
            icon: Youtube,
            class: 'bg-button-youtube hover:bg-button-youtube-hover text-white',
        },
        pdf: {
            label: 'PDF',
            icon: FileText,
            class: 'bg-button-pdf hover:bg-button-pdf-hover text-white',
        },
        online: {
            label: 'Online',
            icon: LinkIcon,
            class: 'bg-button-online hover:bg-button-online-hover text-white',
        },
        dataset: {
            label: 'Dataset',
            icon: Database,
            class: 'bg-button-dataset hover:bg-button-dataset-hover text-white',
        },
    };
    return configs[linkType];
}

// Get all available links (excluding github which goes last)
const links = Object.entries(item)
    .filter(
        ([key, value]) =>
            value &&
            typeof value === 'string' &&
            key !== 'title' &&
            key !== 'image' &&
            key !== 'description' &&
            key !== 'publisher' &&
            key !== 'github',
    )
    .map(([key, value]) => ({ type: key, url: value as string }));

// Add github last if it exists
if ('github' in item && item.github) {
    links.push({ type: 'github', url: item.github });
}
---

<div class="card group bg-card-light dark:bg-card-dark border border-card-border-light dark:border-card-border-dark rounded-card p-0">
    <!-- Image -->
    <div class="relative overflow-hidden aspect-video card-img-container">
        <img
            src={imageSrc?.src}
            alt={item.title}
            class="w-full h-full object-cover transition-transform duration-300 group-hover:scale-110 card-img rounded-t-card-image"
        />
    </div>

    <!-- Content -->
    <div class="space-y-4 p-8">
        <!-- Title -->
        <h3 class="text-gray-900 dark:text-white">
            {item.title}
        </h3>

        <!-- Description or Publisher -->
        <p class="text-gray-700 dark:text-gray-300">
            {type === 'publication' && 'publisher' in item ? item.publisher : item.description}
        </p>

        <!-- Action Buttons -->
        {links.length > 0 && (
            <div class="flex flex-wrap gap-3 pt-2">
                {links.map(({ type: linkType, url }) => {
                    const config = getButtonConfig(linkType);
                    if (!config) return null;
                    const Icon = config.icon;
                    return (
                        <a
                            href={url}
                            target="_blank"
                            rel="noopener noreferrer"
                            class={`inline-flex items-center gap-2 font-medium transition-all duration-200 text-sm rounded-button py-1.5 px-6 ${config.class}`}
                        >
                            <Icon size={ICON_SIZES.SM} />
                            {config.label}
                        </a>
                    );
                })}
            </div>
        )}
    </div>
</div>
